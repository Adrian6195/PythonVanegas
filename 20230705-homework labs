
for i in range(1,11):
    if i % 2 == 1:
        print(i)
#################################################################################################

x = 1 while x <11:
    if x % 2 != 0:
        print(x) x += 1
        
#################################################################################################

for ch in "john.smith@pythoninstitue.org":
    if ch == "@":
        break
    print(ch, end="")
    
#################################################################################################
    
for digit in "01265031806510":
    if digit == "0":
        print("X", end="")
        continue
    print (digit, end="")
    

### LAB 3.2.1.4 ATTEMPT ###########################################################################

##blocks = int(input("Enter the number of blocks: "))
##height = 0
##num_of_layers = 1
##while num_of_layers <= blocks:
##    height = num_of_layers += 1
##    break
##print ("The height of the pyramid: ", height)

### LAB 3.2.1.4 SOLUTION###########################################################################

blocks = int(input("Enter the number of blocks: "))

height = 0
in_layer = 1
while in_layer <= blocks:
    height += 1
    blocks -= in_layer
    in_layer += 1

print("The height of the pyramid:", height)

### LAB 3.2.1.14 SOLUTION###########################################################################

while c0 % 2 == 0: # take any non-negative and non zero integer number and name it c0
    c0 = c0 / 2
    else:
        c0 = 3 * c0 + 1
        if c0 != 1:
            continue
        
### LAB 3.2.1.15 SOLUTION###########################################################################


c0 = int(input("Enter c0: "))

if c0 > 1: # take any non-negative and non zero integer number and name it c0
	steps = 0 # defines a variable to count the number of steps
	while c0 != 1: # go through iterations as long as c0 is not 1
		if c0 %2 != 0: # if c0 is an odd number, do this
			cnew = 3 * c0 + 1
		else: # if c0 is an even number, do this
			cnew = c0 // 2
		print(c0) # prints the number in the step
		c0 = cnew # ensures the calculated number is ran through the following iteration
		steps += 1 # counts the number of iterations
	print("steps =",steps) # prints the number of steps it took to reach 1
else:
	print("Bad c0 value") # a number was entered which was less than 1

### LAB 3.3.1.4 ###########################################################################

#create a flag with a set flag

flag_registerA = 0x1234    #0100 in binary
flag_registerB = 0x1248    #1000 in binary
#create an appropriate mask
mask = 8  #identifies 1000 the significant bit
#1 use & to check if flag set/reset
if flag_registerB & mask:
    print("Windmill is on") # 8 or True / 0 or false
else:
    print("Windmill is off")


    
#2 reset(assign zero) to bit
flag_registerB = flag_registerB & ~mask
#check 2
if flag_registerB & mask: # returns 8/True if set, 0/False if not
    print("Windmill is on") #executed if true
else:
    print("windmill is off") #executed if fals


    
#3 use | to assign bit to 1 
#bit | 1 = 1
#bit | 0 = x
flag_registerB = flag_registerB | mask
#check 3
if flag_registerB | mask:
    print ("The windmill is operational")
else:
    print ("The windmill is not operational")
# This is frustrating because the flag register will always guarantee this boolean to be 'true'




#4 use ^ to make it the opposite/negate your bit
flag_registerB = flag_registerB ^ mask
#check 4
if flag_registerB ^ mask:
    print ("The bit is reset")
else:
    print ("The bit is set")


#The above should output (ingoring the # of course)
#bit is set
#bit is reset
#bit is set
#bit is reset
#bit is set
#Press any key to continue . . .

